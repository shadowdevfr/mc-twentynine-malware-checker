#!/usr/bin/env node
import chalk from 'chalk';
import ora from 'ora';
import fs from 'fs';
import AdmZip from 'adm-zip';
const getFileList = async (dirName) => {
    let files = [];
    const items = fs.readdirSync(dirName, { withFileTypes: true });
    for (const item of items) {
        try {
            if (fs.lstatSync(dirName + "/" + item.name).isDirectory()) {
                files = [
                    ...files,
                    ...(await getFileList(`${dirName}/${item.name}`)),
                ];
            } else {
                files.push(`${dirName}/${item.name}`);
            }
        } catch (error) {
            console.log(chalk.red(`[ERROR -> Continue] ${error}`));
        }
    }
    return files;
};
let infected = 0;
let notinfected = 0;
let infectedlist = [];
async function main() {
    console.log(chalk.blueBright(`
    Minecraft 29-09 infected jarfile checker
    Made by @x_shadow_gc (X_Shadow_#5962 on Discord)
    `));
    await new Promise((resolve) => setTimeout(resolve, 1000));
    const spinner = ora('Listing files & directories to read...').start();
    const files = await getFileList('./');
    spinner.succeed('Listing files & directories to read... ' + chalk.green(`${files.length} files found`));
    console.log(chalk.yellow(`Reading files now...`));
    files.forEach(async (file) => {
        try {
            if (!file.includes('.jar')) return;
            const zip = new AdmZip(file);
            const zipEntries = zip.getEntries();
            await zipEntries.forEach((zipEntry) => {
                zipEntry.entryName = zipEntry.entryName.replace(/\\/g, '/');
                if (zipEntry.entryName.includes('plugin-config.bin')) {
                    console.log(chalk.bgRed(`[FOUND] Found infected file ${file}! Take actions NOW!`));
                    infected++;
                    infectedlist.push(file);
                }
            });
        } catch (error) {
            console.log(chalk.gray(`[ERROR reading zip file -> continue] ${error}`));
        }
    });
    notinfected = files.length - infected;
    fs.writeFileSync('malware.json', JSON.stringify(infectedlist));
}

main().then(() => {
    console.log(chalk.green(`
    Scan finished!
    Infected: ${infected}
    Not infected: ${notinfected}
    Ratio: ${Math.round(infected / notinfected*100,2)}% infected
    `));
});
